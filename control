//This file contains code to randomly control the change of an RGB LED light strip using a sound impact sensor
//Defines the pins on the arduino to what they control
#define REDPIN 5
#define GREENPIN 6
#define BLUEPIN 3
#define SOUNDPIN 7

//Change these values to change the response of the LEDs
#define FADESTEPS 10
#define FADERATE 3
#define FADEOUTINC 20
#define DELAY 10


//Declare global variables
long rainbowIndex;
long colorEffectProb;
long fadeProb;

byte prevRed;
byte prevGreen;
byte prevBlue;

byte newRed;
byte newGreen;
byte newBlue;

boolean sound;

//Define a color class to hold RGB values of each color
class Color
{
    byte redVal;
    byte greenVal;
    byte blueVal;
    String colorName;

    //constructor
  public:
    Color(String nameIn, byte red, byte green, byte blue)
    {
      colorName = nameIn;
      redVal = red;
      greenVal = green;
      blueVal = blue;
    }

    //getters
    byte getRed() {
      return redVal;
    }
    byte getGreen() {
      return greenVal;
    }
    byte getBlue() {
      return blueVal;
    }
    String getName() {
      return colorName;
    }
    /*Static method to fade from one color to the next
       Parameters: r1 - new value of red, r2 - old value of red
                   g1 - new value of green, g2 - old value of green
                   b1 - new value of blue, b2 - old value of blue
    */
    static void fade(byte r1, byte r2, byte g1, byte g2, byte b1, byte b2) {
      //Calculate step size for the fade
      int redIncrement = (r1 - r2) / FADESTEPS;
      int greenIncrement = (g1 - g2) / FADESTEPS;
      int blueIncrement = (b1 - b2) / FADESTEPS;

      //Loop through the steps to fade from one color to the other
      for (byte i = 0; i < FADESTEPS; i++) {
        r2 += redIncrement;
        g2 += greenIncrement;
        b2 += blueIncrement;

        /*
          Serial.print("incremental red is ");
          Serial.println(r2);
          Serial.print("incremental green is ");
          Serial.println(g2);
          Serial.print("incremental blue is ");
          Serial.println(b2);
          Serial.println();
        */

        analogWrite(REDPIN, r2);
        analogWrite(GREENPIN, g2);
        analogWrite(BLUEPIN, b2);
        delay(FADERATE);
      }
      //Update the global previous color values to the most recently displayed color
      prevRed = r1;
      prevGreen = g1;
      prevBlue = b1;
    }
    /*Static method to jump from one color to the next
         Parameters: r - new value of red
                     g - new value of green
                     b - new value of blue
    */
    static void jump(byte r, byte g, byte b) {
      analogWrite(REDPIN, r);
      analogWrite(GREENPIN, g);
      analogWrite(BLUEPIN, b);

      /*
        Serial.print("red is ");
        Serial.println(r);
        Serial.print("green is ");
        Serial.println(g);
        Serial.print("blue is ");
        Serial.println(b);
        Serial.println();
      */

      //Update global variables
      prevRed = r;
      prevGreen = g;
      prevBlue = b;
    }

}; //End class declaration

//Create the 13 Primary Hues which all other colors will be based off of.
Color* red = new Color("red", 255, 0, 0);
Color* orange = new Color("orange", 255, 128, 0);
Color* yellow = new Color("yellow", 255, 255, 0);
Color* lightGreen = new Color("light green", 128, 255, 0);
Color* green = new Color("green", 0, 255, 0);
Color* blueGreen = new Color("blue green", 0, 255, 128);
Color* cyan = new Color("cyan", 0, 255, 255);
Color* lightBlue = new Color("lightBlue", 0, 128, 255);
Color* blue = new Color("blue", 0, 0, 255);
Color* purple = new Color("purple", 128, 0, 255);
Color* pink = new Color("pink", 255, 0, 255);
Color* maroon = new Color("maroon", 255, 0, 128);
Color* white = new Color("white", 255, 255, 255);

//Create array of all the colors
Color *rainbow[] = {red, orange, yellow, lightGreen, green, blueGreen, cyan, lightBlue, blue, purple, pink, maroon, white};

//Runs at the power on of the arduino, runs once
void setup()
{
  //Setup input and output pins
  pinMode(SOUNDPIN, INPUT);
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);

  Serial.begin(9600);

  //Randomly pick an index of the rainbow to start with
  rainbowIndex = random(0, 13);

  //Save the initial color values to the global variables
  prevRed = rainbow[rainbowIndex]->getRed();
  prevGreen = rainbow[rainbowIndex]->getGreen();
  prevBlue = rainbow[rainbowIndex]->getBlue();

  /*
    Serial.print("base color is ");
    Serial.println(rainbow[rainbowIndex]->getName());
    Serial.print("red is ");
    Serial.println(prevRed);
    Serial.print("green is ");
    Serial.println(prevGreen);
    Serial.print("blue is ");
    Serial.println(prevBlue);
    Serial.println();
  */

  //Display that color to the LED strip
  analogWrite(REDPIN, prevRed);
  analogWrite(GREENPIN, prevGreen);
  analogWrite(BLUEPIN, prevBlue);

}

//Repeating method which runs continuously until the arduino is powered off
void loop()
{
  //Value which determines if the sound is on or off
  sound = digitalRead(SOUNDPIN);

  //If the sensor registers sound
  if (sound == true) {
    //Generate new random value for the next color, which color effect, and the fade transition
    rainbowIndex = random(0, 13);
    colorEffectProb = random(1, 101);
    fadeProb = random(1, 101);

    //Update global variables
    newRed = rainbow[rainbowIndex]->getRed();
    newGreen = rainbow[rainbowIndex]->getGreen();
    newBlue = rainbow[rainbowIndex]->getBlue();

    /*
      Serial.print("rainbow index ");
      Serial.println(rainbowIndex);
      Serial.print("color effect prob ");
      Serial.println(colorEffectProb);
      Serial.print("fade prob ");
      Serial.println(fadeProb);
      Serial.println();

      Serial.print("base color is ");
      Serial.println(rainbow[rainbowIndex]->getName());
      Serial.print("red is ");
      Serial.println(newRed);
      Serial.print("green is ");
      Serial.println(newGreen);
      Serial.print("blue is ");
      Serial.println(newBlue);
      Serial.println();
    */

    //Original base color (50% chance)
    if (1 <= colorEffectProb && colorEffectProb <= 50) {
      //Fade transition (50% chance)
      if (1 <= fadeProb && fadeProb <= 25) {
        //Serial.println("base color fade");
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        //Serial.println("base color jump");
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Saturation change to base color(25% chance)
    else if (51 <= colorEffectProb && colorEffectProb <= 75) {
      //calculate random amount of color shift
      long changeVal = random(0, 101);

      //Change values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;

      //Fade transition (50% chance)
      if (1 <= fadeProb && fadeProb <= 25) {
        //Serial.println("saturation fade final values");
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        //Serial.println("saturation jump final value");
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Lightness chance to base color (25% chance)
    else {
      //calculate random amount of color shift
      long changeVal = random(0, 101);
      //calculate direction of shift, up or down
      long sign = random(0, 2);

      //Change color values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;
      //More color value changes
      if (newRed == 128) {
        if (sign) newRed -= changeVal;
        else newRed += changeVal;
      }
      if (newGreen == 128) {
        if (sign) newGreen -= changeVal;
        else newGreen += changeVal;
      }
      if (newBlue == 128) {
        if (sign) newBlue -= changeVal;
        else newBlue += changeVal;
      }
      //Fade transition (50% chance)
      if (1 <= fadeProb && fadeProb <= 25) {
        //Serial.println("lightness fade final values");
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        //Serial.println("lightness jump final values");
        Color::jump(newRed, newGreen, newBlue);
      }
    }
    //How long to wait before restarting the loop
    delay(DELAY);
  }

  //Case for if there is no sound signal

  else {
    if ((prevRed - FADEOUTINC) >= 0 ) {
      prevRed -= FADEOUTINC;
      analogWrite(REDPIN, prevRed);
    }
    if ((prevGreen - FADEOUTINC) >= 0) {
      prevGreen -= FADEOUTINC;
      analogWrite(GREENPIN, prevGreen);
    }
    if ((prevBlue - FADEOUTINC) >= 0) {
      prevBlue -= FADEOUTINC;
      analogWrite(BLUEPIN, prevBlue);
    }
    //Serial.println("off");
    delay(DELAY);
  }

}
