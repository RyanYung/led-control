//This file contains code to randomly control the change of an RGB LED light strip using a sound impact sensor

//Defines the pins on the arduino to what they control
#define REDPIN 6
#define GREENPIN 5
#define BLUEPIN 3
#define SOUNDPIN 7

//Change these values to change the response of the LEDs
#define FADEONSTEPS 10 //How many incremental steps during the fade into the new color (10 steps makes it smooth, 70ms x10 gives it a good fade)
#define FADEONDELAY 70   //Delay between each color of the fade

#define FADEOFFSTEPS 10 //How many incremental steps to turn off the led before the new color comes on (same as above)
#define FADEOFFDELAY 70 //Delay between each step off 

#define JUMPDELAY 350 //How long color stays before changing (250+ is good)

#define OFFINC 30 //Incremental decrease of brightness when no sound is registered (30 and 50ms are good fade out values so it doesnt look like a toggle)
#define OFFDELAY 50 //Delay for fading out lights when there is no sound

#define STROBECOUNT 8  //How many times the light will strobe (these dont really matter yolo it)
#define STROBESPEED 75 //Delay between strobes

#define BASECOLORODDS 30 //Upper parameter for base color odds
#define SATCOLORODDS 60//Upper parameter for saturation color odds
#define LITECOLORODDS 98 //Upper parameter for lightness color odds 

#define FADEODDS 25 //Upper parameter for fade transition odds 
#define COLORSTROBEODDS 30 //Odds of strobe being colors 

#define DELAY 10 //Overll delay for the program

/*  Debugging print statements

      Serial.print("red is ");
      Serial.println(r);
      Serial.print("green is ");
      Serial.println(g);
      Serial.print("blue is ");
      Serial.println(b);
      Serial.println();

      Serial.print("base color is ");
      Serial.println(rainbow[rainbowIndex]->getName());
      Serial.print("red is ");
      Serial.println(newRed);
      Serial.print("green is ");
      Serial.println(newGreen);
      Serial.print("blue is ");
      Serial.println(newBlue);
      Serial.println();
*/

//Declare global variables
long rainbowIndex;
long colorEffectProb;
long fadeProb;

byte prevRed;
byte prevGreen;
byte prevBlue;

byte newRed;
byte newGreen;
byte newBlue;

boolean sound;

//Define a color class to hold RGB values of each color
class Color
{
    byte redVal;
    byte greenVal;
    byte blueVal;
    String colorName;

    //constructor
  public:
    Color(String nameIn, byte red, byte green, byte blue)
    {
      colorName = nameIn;
      redVal = red;
      greenVal = green;
      blueVal = blue;
    }

    //getters
    byte getRed() {
      return redVal;
    }
    byte getGreen() {
      return greenVal;
    }
    byte getBlue() {
      return blueVal;
    }
    String getName() {
      return colorName;
    }
    /*Static method to fade from one color to the next
       Parameters: r1 - new value of red, r2 - old value of red
                   g1 - new value of green, g2 - old value of green
                   b1 - new value of blue, b2 - old value of blue
    */
    static void fade(byte r1, byte r2, byte g1, byte g2, byte b1, byte b2) {
      //Calculate step size for the fade
      //int redIncrement = (r1 - r2) / FADEONSTEPS;
      //int greenIncrement = (g1 - g2) / FADEONSTEPS;
      //int blueIncrement = (b1 - b2) / FADEONSTEPS;

      int redIncrement = r1 / FADEONSTEPS;
      int greenIncrement = g1 / FADEONSTEPS;
      int blueIncrement = b1 / FADEONSTEPS;

      int redOffInc = r2 / FADEOFFSTEPS;
      int greenOffInc = g2 / FADEOFFSTEPS;
      int blueOffInc = b2 / FADEOFFSTEPS;
      byte onRed = r2;
      byte onGreen = g2;
      byte onBlue = b2;
      byte offRed = 0;
      byte offGreen = 0;
      byte offBlue = 0;

      //This for loops fades the lights off 
      for (byte i = 0; i < FADEOFFSTEPS; i++) {
        if ((onRed - redOffInc) >= 0 ) {
          onRed -= redOffInc;
          analogWrite(REDPIN, onRed);
        }
        else if ((onRed - redOffInc < 0)) {
          onRed = 0;
          analogWrite(REDPIN, onRed);
        }
        if ((onGreen - greenOffInc) >= 0) {
          onGreen -= greenOffInc;
          analogWrite(GREENPIN, onGreen);
        }
        else if ((onGreen - greenOffInc < 0)) {
          onGreen = 0;
          analogWrite(GREENPIN, onGreen);
        }
        if ((onBlue - blueOffInc) >= 0) {
          onBlue -= blueOffInc;
          analogWrite(BLUEPIN, onBlue);
        }
        else if ((onBlue - blueOffInc < 0)) {
          onBlue = 0;
          analogWrite(BLUEPIN, onBlue);
        }
        delay(FADEOFFDELAY);
      }

      //Loop through the steps to fade from one color to the other
      //Alternately this loop fades the lights on to the new color 
      for (byte j = 0; j < FADEONSTEPS; j++) {

        offRed += redIncrement;
        offGreen += greenIncrement;
        offBlue += blueIncrement;

        //r2 += redIncrement;
        //g2 += greenIncrement;
        //b2 += blueIncrement;

        //analogWrite(REDPIN, r2);
        //analogWrite(GREENPIN, g2);
        //analogWrite(BLUEPIN, b2);

        analogWrite(REDPIN, offRed);
        analogWrite(GREENPIN, offGreen);
        analogWrite(BLUEPIN, offBlue);
        delay(FADEONDELAY);
      }
      //Update the global previous color values to the most recently displayed color
      prevRed = r1;
      prevGreen = g1;
      prevBlue = b1;
    }
    /*Static method to jump from one color to the next
         Parameters: r - new value of red
                     g - new value of green
                     b - new value of blue
    */
    static void jump(byte r, byte g, byte b) {
      analogWrite(REDPIN, r);
      analogWrite(GREENPIN, g);
      analogWrite(BLUEPIN, b);

      //Update global variables
      prevRed = r;
      prevGreen = g;
      prevBlue = b;
      delay(JUMPDELAY);
    }
    //Static method to rapidly change colors
    static void strobe(Color* colorArray[]) {
      //Determines which type of strobe it will be
      byte strobeEffectValue = random(1, 101);

      //Strobe various colors of the rainbow
      if ( 1 <= strobeEffectValue && strobeEffectValue <= COLORSTROBEODDS) {
        for (byte i = 0; i < STROBECOUNT; i++) {
          byte altRainbowIndex = random(0, 13);
          analogWrite(REDPIN, colorArray[altRainbowIndex]->getRed());
          analogWrite(GREENPIN, colorArray[altRainbowIndex]->getGreen());
          analogWrite(BLUEPIN, colorArray[altRainbowIndex]->getBlue());
          delay(STROBESPEED);
          analogWrite(REDPIN, 0);
          analogWrite(GREENPIN, 0);
          analogWrite(BLUEPIN, 0);
          delay(STROBESPEED);
          prevRed = colorArray[altRainbowIndex]->getRed();
          prevGreen = colorArray[altRainbowIndex]->getGreen();
          prevBlue = colorArray[altRainbowIndex]->getBlue();
        }
      }
      //Strobe white light
      else {
        for (byte i = 0; i < STROBECOUNT; i++) {
          analogWrite(REDPIN, 255);
          analogWrite(GREENPIN, 255);
          analogWrite(BLUEPIN, 255);
          delay(STROBESPEED);
          analogWrite(REDPIN, 0);
          analogWrite(GREENPIN, 0);
          analogWrite(BLUEPIN, 0);
          delay(STROBESPEED);
          prevRed = 0;
          prevGreen = 0;
          prevBlue = 0;
        }
      }
    }

}; //End class declaration

//Create the 13 Primary Hues which all other colors will be based off of.
Color* red = new Color("red", 255, 0, 0);
Color* orange = new Color("orange", 255, 128, 0);
Color* yellow = new Color("yellow", 255, 255, 0);
Color* lightGreen = new Color("light green", 128, 255, 0);
Color* green = new Color("green", 0, 255, 0);
Color* blueGreen = new Color("blue green", 0, 255, 128);
Color* cyan = new Color("cyan", 0, 255, 255);
Color* lightBlue = new Color("light blue", 0, 128, 255);
Color* blue = new Color("blue", 0, 0, 255);
Color* purple = new Color("purple", 128, 0, 255);
Color* pink = new Color("pink", 255, 0, 255);
Color* maroon = new Color("maroon", 255, 0, 128);
Color* white = new Color("white", 255, 255, 255);

//Create array of all the colors
Color *rainbow[] = {red, orange, yellow, lightGreen, green, blueGreen, cyan, lightBlue, blue, purple, pink, maroon, white};

//Runs at the power on of the arduino, runs once
void setup()
{
  //Setup input and output pins
  pinMode(SOUNDPIN, INPUT);
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);

  Serial.begin(9600);

  //Randomly pick an index of the rainbow to start with
  rainbowIndex = random(0, 13);

  //Save the initial color values to the global variables
  prevRed = rainbow[rainbowIndex]->getRed();
  prevGreen = rainbow[rainbowIndex]->getGreen();
  prevBlue = rainbow[rainbowIndex]->getBlue();

  //Display that color to the LED strip
  analogWrite(REDPIN, prevRed);
  analogWrite(GREENPIN, prevGreen);
  analogWrite(BLUEPIN, prevBlue);

}

//Repeating method which runs continuously until the arduino is powered off
void loop()
{
  //Value which determines if the sound is on or off
  sound = digitalRead(SOUNDPIN);

  //If the sensor registers sound
  if (sound == true) {
    //Generate new random value for the next color, which color effect, and the fade transition
    rainbowIndex = random(0, 13);
    colorEffectProb = random(1, 101);
    fadeProb = random(1, 101);

    //Update global variables
    newRed = rainbow[rainbowIndex]->getRed();
    newGreen = rainbow[rainbowIndex]->getGreen();
    newBlue = rainbow[rainbowIndex]->getBlue();

    //Original base color
    if (1 <= colorEffectProb && colorEffectProb <= BASECOLORODDS) {
      //Fade transition (25% chance)
      if (1 <= fadeProb && fadeProb <= FADEODDS) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Saturation change to base color
    else if ((BASECOLORODDS + 1) <= colorEffectProb && colorEffectProb <= SATCOLORODDS) {
      //calculate random amount of color shift
      long changeVal = random(0, 101);

      //Change values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;

      //Fade transition
      if (1 <= fadeProb && fadeProb <= FADEODDS) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Lightness chance to base color
    else if ((SATCOLORODDS + 1) <= colorEffectProb && colorEffectProb <= LITECOLORODDS) {
      //calculate random amount of color shift
      long changeVal = random(0, 101);
      //calculate direction of shift, up or down
      long sign = random(0, 2);

      //Change color values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;
      //More color value changes
      if (newRed == 128) {
        if (sign) newRed -= changeVal;
        else newRed += changeVal;
      }
      if (newGreen == 128) {
        if (sign) newGreen -= changeVal;
        else newGreen += changeVal;
      }
      if (newBlue == 128) {
        if (sign) newBlue -= changeVal;
        else newBlue += changeVal;
      }
      //Fade transition
      if (1 <= fadeProb && fadeProb <= FADEODDS) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }
    //Strobing
    else {
      Color::strobe(rainbow);
    }
    //How long to wait before restarting the loop
    delay(DELAY);
  }

  //Case for if there is no sound signal
  else {
    if ((prevRed - OFFINC) >= 0 ) {
      prevRed -= OFFINC;
      analogWrite(REDPIN, prevRed);
    }
    else if ((prevRed - OFFINC < 0)) {
      prevRed = 0;
      analogWrite(REDPIN, prevRed);
    }
    if ((prevGreen - OFFINC) >= 0) {
      prevGreen -= OFFINC;
      analogWrite(GREENPIN, prevGreen);
    }
    else if ((prevGreen - OFFINC < 0)) {
      prevGreen = 0;
      analogWrite(GREENPIN, prevGreen);
    }
    if ((prevBlue - OFFINC) >= 0) {
      prevBlue -= OFFINC;
      analogWrite(BLUEPIN, prevBlue);
    }
    else if ((prevBlue - OFFINC < 0)) {
      prevBlue = 0;
      analogWrite(BLUEPIN, prevBlue);
    }
    
    delay(OFFDELAY);
  }

}
