//This file contains code to randomly control the change of an RGB LED light strip using a sound impact sensor

#define REDPIN 5
#define GREENPIN 6
#define BLUEPIN 3
#define SOUNDPIN 7

#define FADESTEPS 10
#define FADERATE 5

#define DELAY 5

//Declare global variables
long rainbowIndex;
long colorEffectProb;
long fadeProb;

byte prevRed;
byte prevGreen;
byte prevBlue;

byte newRed;
byte newGreen;
byte newBlue;

//Define a color class to hold RGB values of each color
class Color
{
    byte redVal;
    byte greenVal;
    byte blueVal;

    //constructor
  public:
    Color(byte red, byte green, byte blue)
    {
      redVal = red;
      greenVal = green;
      blueVal = blue;
    }

    //getters
    byte getRed() {
      return redVal;
    }
    byte getGreen() {
      return greenVal;
    }
    byte getBlue() {
      return blueVal;
    }
    /*Static method to fade from one color to the next
       Parameters: r1 - new value of red, r2 - old value of red
                   g1 - new value of green, g2 - old value of green
                   b1 - new value of blue, b2 - old value of blue
    */
    static void fade(byte r1, byte r2, byte g1, byte g2, byte b1, byte b2) {
      //Calculate step size for the fade
      int redIncrement = (r1 - r2) / FADESTEPS;
      int greenIncrement = (g1 - g2) / FADESTEPS;
      int blueIncrement = (b1 - b2) / FADESTEPS;

      //Loop through the steps to fade from one color to the other
      for (byte i = 0; i < FADESTEPS; i++) {
        r2 += redIncrement;
        g2 += greenIncrement;
        b2 += blueIncrement;
        analogWrite(REDPIN, r2);
        analogWrite(GREENPIN, g2);
        analogWrite(BLUEPIN, b2);
        delay(FADERATE);
      }
      //Update the global previous color values to the most recently displayed color
      prevRed = r1;
      prevGreen = g1;
      prevBlue = b1;
    }
    /*Static method to jump from one color to the next
         Parameters: r - new value of red
                     g - new value of green
                     b - new value of blue
    */
    static void jump(byte r, byte g, byte b) {
      analogWrite(REDPIN, r);
      analogWrite(GREENPIN, g);
      analogWrite(BLUEPIN, b);
      //Update global variables
      prevRed = r;
      prevGreen = g;
      prevBlue = b;
    }

}; //End class declaration

//Declare array
Color *rainbow[] = {};

//Runs at the power on of the arduino, runs once
void setup()
{
  //Setup input and output pins
  pinMode(SOUNDPIN, INPUT);
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);

  //Create the 13 Primary Hues which all other colors will be based off of.
  Color* red = new Color(255, 0, 0);
  Color* orange = new Color(255, 128, 0);
  Color* yellow = new Color(255, 255, 0);
  Color* lightGreen = new Color(128, 255, 0);
  Color* green = new Color(0, 255, 0);
  Color* blueGreen = new Color(0, 255, 128);
  Color* cyan = new Color(0, 255, 255);
  Color* lightBlue = new Color(0, 128, 255);
  Color* blue = new Color(0, 0, 255);
  Color* purple = new Color(128, 0, 255);
  Color* pink = new Color(255, 0, 255);
  Color* maroon = new Color(255, 0, 128);
  Color* white = new Color(255, 255, 255);

  //Create array of all the colors
  Color *rainbow[] = {red, orange, yellow, lightGreen, green, blueGreen, cyan, lightBlue, blue, purple, pink, maroon, white};

  //Randomly pick an index of the rainbow to start with
  rainbowIndex = random(0, 13);

  //Save the initial color values to the global variables
  prevRed = rainbow[rainbowIndex]->getRed();
  prevGreen = rainbow[rainbowIndex]->getGreen();
  prevBlue = rainbow[rainbowIndex]->getBlue();

  //Display that color to the LED strip
  analogWrite(REDPIN, prevRed);
  analogWrite(GREENPIN, prevGreen);
  analogWrite(BLUEPIN, prevBlue);

}

//Repeating method which runs continuously until the arduino is powered off
void loop()
{
  //Value which determines if the sound is on or off
  boolean sound = digitalRead(SOUNDPIN);
  //If the sensor registers sound
  if (sound == true) {
    //Generate new random value for the next color, which color effect, and the fade transition
    rainbowIndex = random(0, 13);
    colorEffectProb = random(1, 101);
    fadeProb = random(1, 101);
    
    //Update global variables
    newRed = rainbow[rainbowIndex]->getRed();
    newGreen = rainbow[rainbowIndex]->getGreen();
    newBlue = rainbow[rainbowIndex]->getBlue();

    //Original base color (50% chance)
    if (1 <= colorEffectProb <= 50) {
      //Fade transition (50% chance)
      if (1 <= fadeProb <= 50) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Saturation change to base color(25% chance)
    else if (51 <= colorEffectProb <= 75) {
      //calculate random amount of color shift
      long changeVal = random(0, 101);

      //Change values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;

      //Fade transition (50% chance)
      if (1 <= fadeProb <= 50) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }

    //Lightness chance to base color (25% chance)
    else {
      //calculate random amount of color shift
      long changeVal = random(0, 101);
      //calculate direction of shift, up or down
      long sign = random(0, 2);

      //Change color values
      if (newRed == 255) newRed -= changeVal;
      if (newGreen == 255) newGreen -= changeVal;
      if (newBlue == 255) newBlue -= changeVal;
      if (newRed == 0) newRed += changeVal;
      if (newGreen == 0) newGreen += changeVal;
      if (newBlue == 0) newBlue += changeVal;
      //More color value changes
      if (newRed == 128) {
        if (sign) newRed -= changeVal;
        else newRed += changeVal;
      }
      if (newGreen == 128) {
        if (sign) newGreen -= changeVal;
        else newGreen += changeVal;
      }
      if (newBlue == 128) {
        if (sign) newBlue -= changeVal;
        else newBlue += changeVal;
      }
      //Fade transition (50% chance)
      if (1 <= fadeProb <= 50) {
        Color::fade(newRed, prevRed, newGreen, prevGreen, newBlue, prevBlue);
      }
      //Jump transition (50% chance)
      else {
        Color::jump(newRed, newGreen, newBlue);
      }
    }
    //How long to wait before restarting the loop
    delay(DELAY);
  }

  //Case for if there is no sound signal
  else {
    digitalWrite(REDPIN, 0);
    digitalWrite(GREENPIN, 0);
    digitalWrite(BLUEPIN, 0);
  }
}
